datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product{
  id String @id @default(uuid())
  name String
  company String
  description String
  featured Boolean
  price Int
  image String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clerkId String
  favourites Favourite[]
  reviews Review[]
  cartItems CartItem[]
}

model Favourite{
  id String @id @default(uuid())
  clerkId String
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review{
  id String @id @default(uuid())
  clerkId String
  authorName String
  authorImageURL String
  rating Int
  comment String
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart{
  id String @id @default(uuid())
  clerkId String
  numOfItems Int @default(0)
  cartTotal Int @default(0)
  shipping Int @default(5)
  tax Float @default(0)
  taxRate Float @default(0.1)
  orderTotal Float @default(0)
  cartItems CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem{
  id String @id @default(uuid())
  productId String
  cartId String
  amount Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order{
  id String @id @default(uuid())
  clerkId String
  products Int @default(0)
  orderTotal Float @default(0)
  tax Float @default(0)
  shipping Int @default(0)
  email String
  isPaid Boolean @default(false)
  createdAt DateTime @default(now())
  updated DateTime @updatedAt
}